using System;

using Bio;
using Bio.IO.BAM;
using Bio.IO.SAM;
using SamUtil.Properties;

namespace SamUtil
{
    /// <summary>
    /// Class implementing sort command of SAMUtility.
    /// </summary>
    public class Sort
    {
        #region Field Variables

        /// <summary>
        /// Input file name.
        /// </summary>
        public string InputFilename;

        /// <summary>
        /// Sort input files by read names.
        /// </summary>
        public bool SortByReadName;

        /// <summary>
        /// Usage.
        /// </summary>
        public bool Help;

        /// <summary>
        /// Output file name
        /// </summary>
        public string OutputFilename;

        /// <summary>
        /// whether output file name is auto genertaed.
        /// </summary>
        private bool autoGeneratedOutputFilename = false;
        #endregion

        #region Public Methods

        /// <summary>
        /// Public method to sort BAM file.
        /// SAMUtil.exe in.bam out.bam
        /// </summary>
        public void DoSort()
        {
            string sortExtension = ".sort";
            if (string.IsNullOrEmpty(InputFilename))
            {
                throw new InvalidOperationException(Resources.SortHelp);
            }

            BAMParser parse = new BAMParser();
            SequenceAlignmentMap map = null;

            try
            {
                map = parse.ParseOne<SequenceAlignmentMap>(InputFilename);
            }
            catch(Exception ex)
            {
                throw new InvalidOperationException(Resources.InvalidBAMFile, ex);
            }

            BAMFormatter format = new BAMFormatter
                                  {
                                      CreateSortedBAMFile = true,
                                      SortType =
                                          this.SortByReadName
                                              ? BAMSortByFields.ReadNames
                                              : BAMSortByFields.ChromosomeCoordinates
                                  };

            if (string.IsNullOrEmpty(OutputFilename))
            {
                OutputFilename = InputFilename + sortExtension;
                autoGeneratedOutputFilename = true;
            }

            format.Format(map, OutputFilename);

            if (autoGeneratedOutputFilename)
            {
                Console.WriteLine(Resources.SuccessMessageWithOutputFileName, OutputFilename);
            }
        }

        #endregion
    }
}
