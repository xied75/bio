using System;
using System.IO;

using Bio.IO.BAM;
using SamUtil.Properties;

namespace SamUtil
{
    /// <summary>
    /// Class implementing index command of SAM Utility.
    /// </summary>
    public class Index
    {
        #region Public Fields

        /// <summary>
        /// Input file name.
        /// </summary>
        public string InputFilename;

        /// <summary>
        /// Usage(Help)
        /// </summary>
        public bool Help;

        /// <summary>
        /// Output file name
        /// </summary>
        public string OutputFilename;

        #endregion

        #region Private Fields
        /// <summary>
        /// whether output file name is auto genertaed.
        /// </summary>
        private bool autoGeneratedOutputFilename = false;
        #endregion

        #region Public Methods

        /// <summary>
        /// Public method implementing Index method of SAM tool.
        /// SAMUtil.exe index in.bam (output file: in.bam.bai)
        /// </summary>
        public void GenerateIndexFile()
        {
            if (string.IsNullOrEmpty(InputFilename))
            {
                throw new InvalidOperationException(Resources.IndexHelp);
            }
           
            try
            {
                if (string.IsNullOrEmpty(OutputFilename))
                {
                    OutputFilename = InputFilename + Resources.BAM_INDEXFILEEXTENSION;
                    autoGeneratedOutputFilename = true;
                }

                CreateBAMIndexFile(InputFilename, OutputFilename);

                if (autoGeneratedOutputFilename)
                {
                    Console.WriteLine(Resources.SuccessMessageWithOutputFileName, OutputFilename);
                }
            }
            catch (Exception ex)
            {
                throw new InvalidOperationException(Resources.InvalidBAMFile, ex);
            }
        }

        static void CreateBAMIndexFile(string bamFileName, string indexFileName)
        {
            using (var bamStream = File.OpenRead(bamFileName))
            using (var indexStream = File.Create(indexFileName))
            using (var indexStorage = new BAMIndexStorage(indexStream))
            {
                BAMIndex indexFromBamStorage = new BAMParser().GetIndexFromBAMStorage(bamStream);
                indexStorage.Write(indexFromBamStorage);
            }
        }

        #endregion
    }
}
